"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CcApiContextProviderPlugin = void 0;
const sdk_provider_1 = require("../api/aws-auth/sdk-provider");
const error_1 = require("../toolkit/error");
const json_1 = require("../util/json");
class CcApiContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    /**
     * This returns a data object with the value from CloudControl API result.
     * args.typeName - see https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/supported-resources.html
     * args.exactIdentifier -  use CC API getResource.
     * args.propertyMatch - use CCP API listResources to get resources and propertyMatch to search through the list.
     * args.propertiesToReturn - Properties from CC API to return.
     */
    async getValue(args) {
        const cloudControl = (await (0, sdk_provider_1.initContextProviderSdk)(this.aws, args)).cloudControl();
        const result = await this.findResources(cloudControl, args);
        return result;
    }
    async findResources(cc, args) {
        if (args.exactIdentifier && args.propertyMatch) {
            throw new error_1.ContextProviderError(`Specify either exactIdentifier or propertyMatch, but not both. Failed to find resources using CC API for type ${args.typeName}.`);
        }
        if (!args.exactIdentifier && !args.propertyMatch) {
            throw new error_1.ContextProviderError(`Neither exactIdentifier nor propertyMatch is specified. Failed to find resources using CC API for type ${args.typeName}.`);
        }
        if (args.exactIdentifier) {
            // use getResource to get the exact indentifier
            return this.getResource(cc, args.typeName, args.exactIdentifier, args.propertiesToReturn);
        }
        else {
            // use listResource
            return this.listResources(cc, args.typeName, args.propertyMatch, args.propertiesToReturn);
        }
    }
    /**
     * Calls getResource from CC API to get the resource.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/get-resource.html
     *
     * If the exactIdentifier is not found, then an empty map is returned.
     * If the resource is found, then a map of the identifier to a map of property values is returned.
     */
    async getResource(cc, typeName, exactIdentifier, propertiesToReturn) {
        var _a, _b, _c, _d, _e;
        const resultObjs = [];
        try {
            const result = await cc.getResource({
                TypeName: typeName,
                Identifier: exactIdentifier,
            });
            const id = (_b = (_a = result.ResourceDescription) === null || _a === void 0 ? void 0 : _a.Identifier) !== null && _b !== void 0 ? _b : '';
            if (id !== '') {
                const propsObject = JSON.parse((_d = (_c = result.ResourceDescription) === null || _c === void 0 ? void 0 : _c.Properties) !== null && _d !== void 0 ? _d : '');
                const propsObj = (0, json_1.getResultObj)(propsObject, (_e = result.ResourceDescription) === null || _e === void 0 ? void 0 : _e.Identifier, propertiesToReturn);
                resultObjs.push(propsObj);
            }
            else {
                throw new error_1.ContextProviderError(`Could not get resource ${exactIdentifier}.`);
            }
        }
        catch (err) {
            throw new error_1.ContextProviderError(`Encountered CC API error while getting resource ${exactIdentifier}. Error: ${err}`);
        }
        return resultObjs;
    }
    /**
     * Calls listResources from CC API to get the resources and apply args.propertyMatch to find the resources.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/list-resources.html
     *
     * Since exactIdentifier is not specified, propertyMatch must be specified.
     * This returns an object where the ids are object keys and values are objects with keys of args.propertiesToReturn.
     */
    async listResources(cc, typeName, propertyMatch, propertiesToReturn) {
        var _a;
        const resultObjs = [];
        try {
            const result = await cc.listResources({
                TypeName: typeName,
            });
            (_a = result.ResourceDescriptions) === null || _a === void 0 ? void 0 : _a.forEach((resource) => {
                var _a, _b;
                const id = (_a = resource.Identifier) !== null && _a !== void 0 ? _a : '';
                if (id !== '') {
                    const propsObject = JSON.parse((_b = resource.Properties) !== null && _b !== void 0 ? _b : '');
                    const filters = Object.entries(propertyMatch);
                    let match = false;
                    if (filters) {
                        match = filters.every((record, _index, _arr) => {
                            const key = record[0];
                            const expected = record[1];
                            const actual = (0, json_1.findJsonValue)(propsObject, key);
                            return propertyMatchesFilter(actual, expected);
                        });
                        function propertyMatchesFilter(actual, expected) {
                            // For now we just check for strict equality, but we can implement pattern matching and fuzzy matching here later
                            return expected === actual;
                        }
                    }
                    if (match) {
                        const propsObj = (0, json_1.getResultObj)(propsObject, resource.Identifier, propertiesToReturn);
                        resultObjs.push(propsObj);
                    }
                }
            });
        }
        catch (err) {
            throw new error_1.ContextProviderError(`Could not get resources ${JSON.stringify(propertyMatch)}. Error: ${err}`);
        }
        return resultObjs;
    }
}
exports.CcApiContextProviderPlugin = CcApiContextProviderPlugin;
//# sourceMappingURL=data:application/json;base64,